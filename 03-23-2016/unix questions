
Comprehensive list of command line tools from datascienceatthecommandline.com (Luke's email)

Need to add questions about man pages
Sending email through UNIX command line

awk
aws

bash
bc
bigmler
body

cat
cd
chmod
cols
cowsay
cp
csvcut
csvgrep
csvjoin
csvlook
csvsort
csvsql
csvstack
csvstat
curl
cut

display
drake
dseq

echo
env
export

feedgnuplot
find
for

git
grep

head
header

in2csv

jq
json2csv

less
ls

man
mkdir
mv

parallel
paste
pbc
pip
pwd
python

R
Rio
Rio-scatter
rm
run-experiment

sample
scp
scrape
sed
seq
shuf
sort
split
sql2csv
ssh
sudo

tail
tapkee
tar
tee
tr
tree
type

uniq
unpack
unrar
unzip

wc
weka
which

xml2json

Basic questions
Question 1

Usage of 'awk'

what is the sum of the first 100 numbers?
seq 100 | awk '{sum+=$1; n++} END {print sum}'

Question 2

Usage of 'bash'

Write a program that prints your name using bash

vim name.sh
#!/bin/bash
echo your name

bash name.sh
your name

Question 3

Usage of 'bc'

echo '5*e(e(1))' | bc -l

Question 4

Usage of 'cat'

vim name.sh
#!/bin/bash
echo your name

How can we see the contents of name.sh without opening the file using vim?
cat name.sh or paste name.sh

Question 5

Usage of 'curl'

How can we download nytimes.com and store it in a text file?
curl http://www.nytimes.com | nytimes.txt

Question 6

Usage of 'less'

How can you navigate a large file like crunchbase.csv without actually opening it in an editor?
less crunchbase.csv

Question 7

Usage of 'ls'
Usage of 'man'

Question 8

Usage of 'paste'

seq 5 > seq.txt

How can you transpose this column of 5 numbers into a row with numbers separated by commas?
paste -d, -s < seq.txt

Question 9

seq 5 > mat1.txt
seq 10:15 > mat2.txt
paste mat1.txt mat2.txt
The command above will form a 5 by 2 matrix. How can you transpose that matrix into a 10 by 1 matrix with alternative rows from mat1 and mat2?
paste -d\n mat1.txt mat2.txt

Question 10

The input file scores.txt looks like this

Input file: scores.txt
John:
score = 77
Mike:
score = 62
Kate:
score = 54
Serena:
score = 78
Jamal:
score = 91

Print out the names and scores of the students from scores.txt who scored more than the class average.
paste - - < scores.txt | awk -F[:,=] '{sum += $3; n++} END {$NF > 60 print $1 ":" $2 "=" $3}'

Question 11

Input file: scores.txt
John:
score = 77
Mike:
score = 62
Kate:
score = 54
Serena:
score = 78
Jamal:
score = 91

Print out the names and scores of the students from scores.txt who scored less than 60 points.
paste - - < scores.txt | awk -F[:,=] '{sum += $3; n++} END {$NF < 60 print $1 ":" $2 "=" $3}'


Question 12

Input file: grades.txt
John:
score1 = 77,
score2 = 65,
score3 = 81,
Mike:
score1 = 62,
score2 = 68,
score3 = 74,
Kate:
score1 = 54,
score2 = 65,
score3 = 77,
Serena:
score1 = 78,
score2 = 81,
score3 = 79,
Jamal:
score1 = 91,
score2 = 94,
score3 = 92

Print out the names and grades of the students using grades.txt where the grades are defined as follows. If  scored less than 60 points.
paste - - - - < grades.txt | awk -F[:,=] '{if($3+$5+$7 > 250) print $1, "Grade: ", "A" ; else if($3+$5+$7 < 250 && $3+$5+$7 > 200) print $1, "Grade: ", "B" ; else print $1, "Grade: ", "C"}'



Question 13

Usage of 'shuf'

Generate a sequence of 10 numbers from 1 to 10 and print out the average value of the top 5 numbers after doing a randomly permutating those 10 numbers. 
seq 10 | shuf | head -5 | awk '{sum+=$1; n++} END {print sum/n}'

Question 14

Usage of 'tar'

How can you extract a compressed file with .tar extension?
tar xvzf file.tar

Question 15

Usage of 'tr'

Convert the contents in the file 'name.sh' into upper case.
tr '[:lower:]' '[:upper:]' < name.sh

Question 16

Usage of 'which'

Print out the PATH of the command 'man'
which man


Question 17

How many even numbers are there between the numbers 1 and 101? Store the output in a file named 'even_odd'.
seq 101 | grep -E "0$|2$|4$|6$|8$" | wc -l > even_odd
seq 101 | awk "NR%2==0" | wc -l > even_odd
seq 101 | sed -n "0~2p" | wc -l >even_odd

Question 18

How many odd numbers are there between the numbers 1 and 101? Append the output to the file named 'even_odd'.
seq 101 | grep -Ev "0$|2$|4$|6$|8$" | wc -l >> even_odd
seq 101 | awk "NR%2" | wc -l > even_odd
seq 101 | sed -n "1~2p" | wc -l > even_odd

Question 19

How to read the information about the built-in command line tools like "cd"?
help cd

Chapter 4
Question 20

Download the text file from the link below and print out the top k most common words that begin with 'a' and end with 'g'. k is a user input who value can be varied. For example if k = 5, then it should print the top 5 most common words and if k = 100, then it should print top 100 most common words.
http://www.gutenberg.org/cache/epub/23/pg23.txt

#!/usr/bin/env bash
NUM = '$1'
curl -s http://www.gutenberg.org/cache/epub/23/pg23.txt | tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | grep -oE '\<a.*g\>' | sort | uniq -c | sort -nr | head -n $NUM

Question 21
(follow up)
Download the text file from the link below and print out the top 10 most common words that doesn't begin with 'a' and end with 'g'.
http://www.gutenberg.org/cache/epub/23/pg23.txt

curl -s http://www.gutenberg.org/cache/epub/23/pg23.txt | tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | grep -v '\<a.*g\>' | sort | uniq -c | sort -nr | head -10

Question 22
 Download the following text files from the links below and save them in a directory. Now write a bash script that takes the whole directory as an input and prints out the top the 10 most common words that begins with letter 'z'.

http://www.gutenberg.org/cache/epub/23/pg23.txt
http://www.gutenberg.org/cache/epub/74/pg74.txt
http://www.gutenberg.org/cache/epub/76/pg76.txt
http://www.gutenberg.org/cache/epub/2542/pg2542.txt
http://www.gutenberg.org/cache/epub/2701/pg2701.txt

#!/usr/bin/env bash
curl ~/directory/ | tr '[:upper:]' '[:lower:]' | grep -oE '\w+' | grep -i '\z+' | sort | uniq -c | sort -nr | head -n 10


commands being used - grep, cut, sort, uniq, head, 

Question 23

What are the top 10 startup markets in the region of cleveland? Ensure that their status is operating.
(todo: make a unique list for the status column)
grep -i ",operating," crunchbase.csv | grep "OH,Cleveland" | cut -d, -f3 | sort | uniq -c | sort -nr | head -10

Question 24

What are the top 10 startup markets in the state of New York? Exclude the startups in New York City region. Ensure that they are operating.( todo: "NY, New York City", check for the space )
grep -i "operating" crunchbase.csv | grep -vE "NY, New York City | NY,New York City " | grep "NY" | cut -d, -f3 | sort | uniq -c | sort -nr | head -10

Question 25

Print out the top 10 startup markets between 2010 and 2014 and the number of startups in each market. Ensure that their status is operating.
grep -i "operating" crunchbase.csv | grep ",201[0-4]" | cut -d, -f3 | sort | uniq -c | sort -nr | head -10

Question 26

What are the top 10 highest funded startups 1970-2014?
sort -t, -k4nr crunchbase.csv | head -10

Question 27

What are the top 10 highest funded startups that have closed? Print the name of the startup, it's market and the amount of funding it received in a text file. 
grep -i "closed" crunchbase.csv | sort -t, -k4nr | head -10 | cut -d, -f-1,3-4 > closed.txt

Question 28

What are the top 10 highest funded startups that have succeeded?("Succeeded" here means their status is either operating or acquired)
grep -Ei "operating|acquired" crunchbase.csv | sort -t, -k4nr | head -10

Question 29

Print out the top 25 to 50 highest funded startups that have succeeded?("Succeeded" here means their status is either operating or acquired)
grep -Ei "operating|acquired" crunchbase.csv | sort -t, -k4nr | head -50 | tail -25 

Question 30

Print out the top 25 startup markets in the combined states of New York and California by the number of occurances. Ensure that their status is operating.
grep -Ei ",NY|,CA" crunchbase.csv | cut -d, -f3 | sort | uniq -c | sort -nr | head -25

Question 31

print out the top 10 states with the highest number of manufacturing startups. Save the output in a text file.
grep -i "Manufacturing" crunchbase.csv | cut -d, -f7 | sort | uniq -c | sort -nr | head -10 > manf_states.txt

Question 32

print out the top 10 cities with the highest number of manufacturing startups. Save the output in a text file.
grep -i "Manufacturing" crunchbase.csv | cut -d, -f9 | sort | uniq -c | sort -nr | head -10 > manf_states.txt

Question 33

Print out the top 25 years where the highest number of startups have been founded.
cut -d, -f11 crunchbase.csv | sort | uniq -c | sort -nr | head -25

Question 34

What is the average funding received by software startups? Ensure that their status is operating.

grep -i "operating" crunchbase.csv | cut -d, -f3,4 | grep -i "software" | cut -d, -f2 | awk '{sum += $1; n++} END { printf("%10f\n", sum/n) }'

Question 35

Print out the top 10 startups based on the average funding they received. Average funding here means the total funding divided by the number of funding rounds. Ensure that their status is operating
grep -i "operating" crunchbase.csv | grep -v ",[[:space:]]," | cut -d, -f 1,4,10 | awk -F "," '{print $1 "\t,\t " $2/$3}' | sort -t, -k2nr | awk -F "," '{printf "%20s %10d\n", $1, $2}' | head -10

Question 36

Print out the number of startups who have been funded more than once. 
cut -d, -f10 crunchbase.csv | grep -ov "1" | wc -l


Question 37

Print out the number of startups who have been funded only once
cut -d, -f10 crunchbase.csv | grep -o "1" | wc -l

Question 38

Print out the oldest 10 startups who were founded before 2000. Ensure that their status is operating.
grep -i "operating" crunchbase.csv |  cut -d, -f1,3,11 | grep -v ",[[:space:]]$" | grep -v ",20[0-1][0-9]" | head -10

Question 39

Print out the oldest 10 startups who were founded before 2000 and have been funded only once. Ensure that their status is operating.
grep -i "operating" crunchbase.csv |  cut -d, -f1,3,10,11 | grep -v ",[[:space:]]$" | grep -v ",20[0-1][0-9]" | grep  ",1," | head -10

Question 40

Print out the oldest 10 startups who were founded before 2000 and have been funded only once. Ensure that their status is operating.
grep -i "operating" crunchbase.csv |  cut -d, -f1,3,10,11 | grep -v ",[[:space:]]$" | grep -v ",20[0-1][0-9]" | grep  ",1," | head -10

Chapter 3
Question 41

Print out the oldest 10 startups who were founded after 2000 and have been funded only once. Ensure that their status is operating. Also print 'Company: ' and 'Industry: ' before the name of the company and the type of the industry respectively. For example, your output should look like this, Company: Facebook,	Industry: software.
grep -i "operating" crunchbase.csv |  cut -d, -f1,3,10,11 | grep -v ",[[:space:]]$" | grep -v ",20[0-1][0-9]" | grep  ",1," | cut -d, -f1,2 | awk -F "," '{printf "Company: %30s, Industry: %15s\n", $1, $2}' | head -10




Chapter 5


questions on titanic.csv dataset

The titanic.csv is available at https://github.com/caesar0301/awesome-public-datasets/blob/master/Datasets/titanic.csv.zip

VARIABLE DESCRIPTIONS:
survival        Survival
                (0 = No; 1 = Yes)
pclass          Passenger Class
                (1 = 1st; 2 = 2nd; 3 = 3rd)
name            Name
sex             Sex
age             Age
sibsp           Number of Siblings/Spouses Aboard
parch           Number of Parents/Children Aboard
ticket          Ticket Number
fare            Passenger Fare
cabin           Cabin
embarked        Port of Embarkation
                (C = Cherbourg; Q = Queenstown; S = Southampton)

43. Print out the total number of passengers on the Titanic.

 wc -l titanic.csv

44. Print out the total number of male passengers on the Titanic.

cut -d, -f6 titanic.csv | sed -n '/\<male\>/p' | wc -l


45. Print out the total number of female passengers on the Titanic.

cut -d, -f6 titanic.csv | sed -n '/\<female\>/p' | wc -l

46. Print out the total number of people who have survived.

cut -d, -f2 titanic.csv | sed -n '/\<1\>/p' | wc -l

47. Print out the total number of people who have not survived.

cut -d, -f2 titanic.csv | sed -n '/\<0\>/p' | wc -l

48. Print out the total number of people from the first class who have survived.

cut -d, -f2,3 titanic.csv | awk -F[,] '{if($1 == 1 && $2 == 1){n++}} END {print n}'

49. Print out the total number of male passengers from the first class who have survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<male\>/p' | awk -F[,] '{if($1 == 1 && $2 == 1){n++}} END {print n}'

50. Print out the total number of male passengers from the first class who have not survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<male\>/p' | awk -F[,] '{if($1 != 1 && $2 == 1){n++}} END {print n}'

51. Print out the total number of female passengers from the first class who have survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<female\>/p' | awk -F[,] '{if($1 == 1 && $2 == 1){n++}} END {print n}'

52. Print out the total number of female passengers from the first class who have not survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<female\>/p' | awk -F[,] '{if($1 != 1 && $2 == 1){n++}} END {print n}'

53. Print out the total number of male passengers from the third class who have survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<male\>/p' | awk -F[,] '{if($1 == 1 && $2 == 3){n++}} END {print n}'

54. Print out the total number of male passengers from the third class who have not survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<male\>/p' | awk -F[,] '{if($1 1= 1 && $2 == 3){n++}} END {print n}'

55. Print out the total number of female passengers from the third class who have survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<female\>/p' | awk -F[,] '{if($1 == 1 && $2 == 3){n++}} END {print n}'

56. Print out the total number of female passengers from the third class who have survived.

cut -d, -f2,3,6 titanic.csv | sed -n '/\<female\>/p' | awk -F[,] '{if($1 != 1 && $2 == 3){n++}} END {print n}'

57. What is the ratio of the survivors from the first class to the third class.

cut -d, -f2,3 titanic.csv | grep -v "2" | awk -F[,] '{if($1 == 1){if($2 == 1) {n++} else if($2 == 3){m++}}} END {print "First class survivors :", n, "Third class survivors :", m, "The ratio of first class survivors to the third class survivors is :", n/m}'

58. How many passengers have boarded the Titanic from Southampton?

cut -d, -f13 titanic.csv | sed  -n "\<S\>/p" | wc -l

59. How many passengers who boarded at Southampton have survived?

cut -d, -f2,13 titanic.csv | sed  -n "/\<1\>,\<S\>/p" | wc -l

60. How many male passengers who boarded at Southampton have survived?

cut -d, -f2,6,13 titanic.csv | sed  -n "/\<1\>,/\<male\>,\<S\>/p" | wc -l

61. Print out the total number of siblings/spouses of those who boarded at Southampton and have not survived.

cut -d, -f2,8,13 titanic.csv | sed  -n "/\<S\>/p" | awk -F[,] '{if($1 != 1) {sum+=$2}} END {print "Total number of siblingss/spouses of those who boarded at Southampton but have not survived is ", sum}'

62. What is the average ticket fare of passengers who boarded at Queenstown?

cut -d, -f11,13 titanic.csv | sed  -n "/\<Q\>/p" | awk -F[,] '{sum+=$1; n++} END {print "The average ticket fare of those who boarded at Queenstown is ", sum/n}'

63. What is the average ticket fare of male passengers who have survived?

cut -d, -f2,6,11 titanic.csv | sed -n '/\male\>/p' | awk -F[,] '{if($1 == 1) {sum += $3; n++}} END {print "The average fare of surviving male passengers is ", sum/n}'

64. What is the average ticket fare of male passengers who have not survived?

cut -d, -f2,6,11 titanic.csv | sed -n '/\male\>/p' | awk -F[,] '{if($1 != 1) {sum += $3; n++}} END {print "The average fare of surviving male passengers is ", sum/n}'

65. What is the average ticket fare of female passengers who have survived?

cut -d, -f2,6,11 titanic.csv | sed -n '/\female\>/p' | awk -F[,] '{if($1 == 1) {sum += $3; n++}} END {print "The average fare of surviving male passengers is ", sum/n}'

66. What is the average ticket fare of female passengers who have not survived?

cut -d, -f2,6,11 titanic.csv | sed -n '/\female\>/p' | awk -F[,] '{if($1 != 1) {sum += $3; n++}} END {print "The average fare of surviving male passengers is ", sum/n}'

67. Print out the total number of parents/children of the surviving female first class passengers.

cut -d, -f2,6,9 titanic.csv | sed -n '/\female\>/p' | awk -F[,] '{if($)sum += $3} END {print "The total number of parents/children of surviving female first class passengers are ", sum}'

68. Print out the total number of children on the Titanic. Consider the age of a child to be less than or equal to 12.

cut -d, -f7 titanic.csv | awk '{if($1 <= 12) {n++}} END {print "Total number of children are ", n}'

69. How many children who boarded at Cherbourg have survived?

cut -d, -f2,7,13 titanic.csv | sed -e '/,,/d' | grep -i "c" | awk -F[,] '{if($1 == 1 && $2 <= 12) {n++}} END {print "Total number of surviving children who boarded at Cherbourg are ", n}'

70. What is the average ticket fare of surviving teenagers who boarded at Queenstown and are from the first class?

cut -d, -f2,7,11,13 titanic.csv | sed -e '/,,/d' | grep -i "Q" | awk -F[,] '{if($1 == 1 && $2 > 12 && $2 < 20) {sum += $11}} END {print "The average ticket fare of teenage survivors who boarded at Queenstown is ", sum/n}'

71. Print out the names and ages of the oldest 10 survivors.

cut -d, -f2,4,5,7 titanic.csv | sed -e '/,$/d' | sort -t, -k4n | awk -F[,] '{gsub(/"/, ""); if($1 ==1) {print $3, $2, $4}}' | head -10

72. Print out the names and ages of the youngest 10 survivors.

cut -d, -f2,4,5,7 titanic.csv | sed -e '/,$/d' | sort -t, -k4n | awk -F[,] '{gsub(/"/, ""); if($1 ==1) {print $3, $2, $4}}' | head -10

73. What is the ratio of male to female survivors?

cut -d, -f2,6 titanic.csv | grep "1" | awk -F[,] '{if($2 == "male") {n++} else {m++}} END {print "Male survivors :", n, "Female survivors :", m, "The ratio of male survivors to the female survivors is :", n/m}'

74. What is the ratio of average ticket fare of first class passengers to the third class passengers?

cut -d, -f3,11 titanic.csv | grep -v "2" | awk -F[,] '{if($1 ==1){sum1 += $2; n++} else {sum2 += $2; m++}} END {print "The average ticket fare of first class passengers is ", sum1/n, "; The average ticket fare of third class passengers is ", sum2/m, "; The ratio of average ticket fares of first class passengers to the third class passengers is ", (sum1*m)/(sum2*n)}'

75. What is the average age of male survivors and female survivors?

cut -d, -f2,6,7 titanic.csv | sed -e '/,$/d' | grep -v "^0" | awk -F[,] '{if($2 == "male") {sum1 += $3; n++} else {sum2 += $3; m++}} END {print "The average age of male survivors is ", sum1/n, " and the average age of female survivors is ", sum2/m}'

76. Print out the names, ages, passenger class and Survival status of the top 10 people who paid the highest ticket fares.

cut -d, -f2-5,7,11 titanic.csv | sort -t, -k6nr | head -10 

77. Print out the names, ages, passenger class and Survival status of the bottom 10 people who paid the highest ticket fares.

cut -d, -f2-5,7,11 titanic.csv | sort -t, -k6nr | tail -10 

78. What is the average age of a third class passenger who survived the accident?

cut -d, -f2,3,7 titanic.csv | sed -e '/,$/d' | awk -F[,] '{if($1 == 1 && $2 == 3) {sum += $3; n++}} END {print "The number of third class passengers who survived is ", n, "; The average age of a survivor holding a third class ticket is ", sum/n}'

79. What is the average age of a first class passengers who survived the accident?

cut -d, -f2,3,7 titanic.csv | sed -e '/,$/d' | awk -F[,] '{if($1 == 1 && $2 == 1) {sum += $3; n++}} END {print "The number of first class passengers who survived is ", n, "; The average age of a survivor holding a third class ticket is ", sum/n}'

80. What is the median age of survivors (shell scripting question?!?)

cut -d, -f2,7 titanic.csv | sed -e '/,$/d' | sort -t, -k2 | awk -F[,] '{if($1 == 1) {sum += $1; n}} END {if(n%2 == 0) {for(i=0; i<=n/2; i++) {print $2}}}''

81. Print out the number of people who are travelling alone i.e. these passengers don't have any siblings/spouses or parents/children on board. How many of them survived and how many did not survive?

cut -d, -f2,8,9 titanic.csv | awk -F[,] '{if($2 == 0 && $3 == 0) {if ($1 == 1) {n++} else {m++}}} END {print "The number of solo passengers who survived are ", n, "; The number of solo passengers who did not survive are ", m, "; The total number of solo passengers are ", n+m}'

82. Print out the number of people who are travelling with a family i.e. these passengers travelling with siblings/spouses or parents/children on board. How many of them survived and how many did not survive?

cut -d, -f2,8,9 titanic.csv | awk -F[,] '{if($2 != 0 || $3 != 0) {if ($1 == 1) {n++} else {m++}}} END {print "The number of passengers with families on board who survived are ", n, "; The number of passengers with families on board but did not survive are ", m, "; The total number of passengers with families on board are ", n+m}'


########

Shell scripting questions

Simple questions

83)

Write a bash script to convert 10 '.txt' files in a directory to 10 '.csv' files.

#!/usr/bin/env bash


84)

GIven a folder with 10 '.txt' files, write a bash script that sorts those 10 '.txt' files and creates a single '.csv' file with 26 columns named [a-z]. Place the words in the appropriate column, the first letter of the word must match the columns name. Repitions are not allowed. 

85)

Create a dictionary from a folder with 10 '.txt' files. (quite similar to Question 2)

86)

Given a folder with 10 '.txt' files. Write a bash script to find out the top 10 words from the entire directory. One way to work out this exercise is to find out the top 10 words from every file and save them in a new file and then we can find out the top 10 words of that new file. 

87)

Given a square matrix of size 100 * 100, write a bash script that transposes the matrix. Transpose means A[i,j] = A[j,i]

88)
Weight balance problem(Hackerrank)
Given an array A[] of size N, find the element 'i' that satisfies the condition A[0]+A[1]+....+A[i-1] = A[i+1]+A[i+2]+....+A[N]

89)

A folder contains 10 '.csv' files. Each file has an IP address in it's header and an IP address in it's body. The task is to find all the IP addresses that are in the body and store them in a new '.csv' file.

90)

Given a folder with 10 '.txt' files, write a bash script that finds out anagrams of "a //word//" from all the files and store them in a new file.

91)

Write a bash script that checks whether a given number is a prime number or not

92)

Write a bash script to calculate the average number of words in a folder that contains 10 '.txt' files. 

93)

write a bash script to generate GOOD quality random numbers(high quality is desirable)

94)(general basic programming questions)

Write a bash script that implements a bubble sort. 

95)

Write a bash script to implement a binary search algorithm

96)

Write a bash script to implementation of a hash table?? Not sure if it's easy

97)

Write a bash script to implement a merge sort

98)

Write a bash script that generates fibonacci series

99)

Given a folder with a 10 '.txt' files, write a bash script to find out all the email addresses from that directory

100)

Write a  bash script that converts words in alternative lines into upper case letters.

101)

Write a bash script that takes a folder with 10 '.txt' files as input and return the name of the file that is empty.

102) 

Write a bash script to delete duplicate records from a '.csv' file. 

#####






















































